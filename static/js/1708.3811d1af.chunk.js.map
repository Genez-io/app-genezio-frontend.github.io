{"version":3,"file":"static/js/1708.3811d1af.chunk.js","mappings":"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","sources":["components/Elements/Alerts/data.tsx","components/Elements/Alerts/Alerts.tsx"],"sourcesContent":["export const initialList = [\r\n  {\r\n    id: \"1\",\r\n    show: \"Well done!\",\r\n    variant: \"success\",\r\n    text: \"You successfully read this alert message.\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    show: \"Heads up!\",\r\n    variant: \"danger\",\r\n    text: \" This alert needs your attention, but it's not super .\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    show: \"Warning!\",\r\n    variant: \"warning\",\r\n    text: \"Better check yourself, you're not looking too good.\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    show: \"Oh snap!\",\r\n    variant: \"info\",\r\n    text: \"Change a few things up and try submitting again.\",\r\n  },\r\n];\r\n\r\nexport const initialListdismissing = [\r\n  {\r\n    id: \"1\",\r\n    show: \"Holy guacamole!\",\r\n    variant: \"warning\",\r\n    text: \"You should check in on some of those fields below.\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    show: \"Holy guacamole!\",\r\n    variant: \"success\",\r\n    text: \"You should check in on some of those fields below.\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    show: \"Holy guacamole!\",\r\n    variant: \"danger\",\r\n    text: \" You should check in on some of those fields below.\",\r\n  },\r\n\r\n  {\r\n    id: \"4\",\r\n    show: \"Holy guacamole!\",\r\n    variant: \"info\",\r\n    text: \"You should check in on some of those fields below.\",\r\n  },\r\n];\r\n\r\nexport const initialListicons = [\r\n  {\r\n    id: \"1\",\r\n    show: \"Default!\",\r\n    variant: \"default\",\r\n    icons: \"fe fe-download\",\r\n    text: \"This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    show: \"Primary!\",\r\n    variant: \"primary\",\r\n    icons: \"fe fe-check-square\",\r\n    text: \"This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    show: \"Success!\",\r\n    variant: \"success\",\r\n    icons: \"fe fe-thumbs-up\",\r\n    text: \" This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    show: \"Info!\",\r\n    variant: \"info\",\r\n    icons: \"ti-bell\",\r\n    text: \"This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n  {\r\n    id: \"5\",\r\n    show: \"Warning!\",\r\n    variant: \"warning\",\r\n    icons: \"fe fe-info\",\r\n    text: \"This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n  {\r\n    id: \"7\",\r\n    show: \"Danger!\",\r\n    variant: \"danger\",\r\n    icons: \"fe fe-slash\",\r\n    text: \"This is a warning alert—check it out that has an icon too!\",\r\n  },\r\n];\r\n\r\n export const Alertdatalink = [\r\n    {\r\n      color: \"primary\",\r\n    },\r\n    {\r\n      color: \"secondary\",\r\n    },\r\n    {\r\n      color: \"success\",\r\n    },\r\n    {\r\n      color: \"danger\",\r\n    },\r\n    {\r\n      color: \"warning\",\r\n    },\r\n    {\r\n      color: \"info\",\r\n    },\r\n    {\r\n      color: \"light\",\r\n    },\r\n    {\r\n      color: \"dark\",\r\n    },\r\n  ];\r\n export const Alertdatacontent = [\r\n    {\r\n      bg: \"success\",\r\n      fe: \"fe fe-check-circle\",\r\n      text: \"Well done!\",\r\n    },\r\n    {\r\n      bg: \"warning\",\r\n      fe: \"fe fe-alert-octagon\",\r\n      text: \"Warning!\",\r\n    },\r\n    {\r\n      bg: \"danger\",\r\n      fe: \"fe fe-delete\",\r\n      text: \"Error!\",\r\n    },\r\n  ];\r\n  \r\n   \r\n ","import React, { useState } from 'react';\nimport { Breadcrumb, Card, Col, Form, Collapse, Row, Alert, Button } from \"react-bootstrap\";\nimport { initialList,initialListdismissing,initialListicons,Alertdatalink,Alertdatacontent } from './data';\nconst Alerts = () => {\n  const [open, setOpen] = useState(false);\n  const [alertData, setalertData] = useState(initialList);\n  const [Outline, setOutline] = useState(false);\n  const [outline, setoutline] = useState(initialList);\n  const [Solid, setSolid] = useState(false);\n  const [solid, setsolid] = useState(initialList);\n  const [Dismissing, setDismissing] = useState(false);\n  const [Icon, setIcon] = useState(false);\n  const [Link, setLink] = useState(false);\n  const [DismissingIcon, setDismissingIcon] = useState(false);\n  const [Additional, setAdditional] = useState(false);\n\nconst [Alertdismissing, setAlertdismissing] = useState(initialListdismissing);\nconst [iconsdismissing, seticonsdismissing] = useState(initialListicons);\n  let handleRemove = (id:any) => {\n    const newList = alertData.filter((list) => list.id !== id);\n    setalertData(newList);\n  }\n  let handleRemoveoutline = (id:any) => {\n    const newList = outline.filter((list) => list.id !== id);\n    setoutline(newList);\n  }\n  let handleRemovesolid = (id:any) => {\n    const newList = solid.filter((list) => list.id !== id);\n    setsolid(newList);\n  }\n  let handleRemovedismissing = (id:any) => {\n    const newList = Alertdismissing.filter((list) => list.id !== id);\n    setAlertdismissing(newList);\n  }\n  let handleRemoveicons = (id:any) => {\n    const newList = iconsdismissing.filter((list) => list.id !== id);\n    seticonsdismissing(newList);\n  }\n  return (\n    <div>\n      {/* <!-- breadcrumb --> */}\n      <div className=\"breadcrumb-header justify-content-between\">\n        <div className=\"left-content\">\n          <span className=\"main-content-title mg-b-0 mg-b-lg-1\">ALERTS</span>\n        </div>\n        <div className=\"justify-content-center mt-2\">\n          <Breadcrumb className=\"breadcrumb\">\n            <Breadcrumb.Item className=\"breadcrumb-item tx-15\" href=\"#\">\n              Elements\n            </Breadcrumb.Item>\n            <Breadcrumb.Item\n              className=\"breadcrumb-item \"\n              active\n              aria-current=\"page\"\n            >\n              Alerts\n            </Breadcrumb.Item>\n          </Breadcrumb>\n        </div>\n      </div>\n      {/* <!-- /breadcrumb --> */}\n\n      {/* <!-- row --> */}\n      <Row className='alerts'>\n        <Col lg={6} md={12} sm={12}>\n          <Card id=\"basic-alert\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                  <h6 className=\"card-title mb-1\">Basic Alerts</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setOpen(!open)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Use one of the four required contextual classNamees.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <React.Fragment>\n                    {alertData.map((item, k) => (\n                      <React.Fragment key={k}>\n                        <Alert\n                          className=\"alert alert-dismissible fade show \"\n                          variant={item.variant}\n                        >\n                          {\" \"}\n                          <strong>{item.show}</strong> {item.text}\n                          <Button\n                            variant=\"\"\n                            type=\"button\"\n                            onClick={() => handleRemove(item.id)}\n                            className=\"btn-close btn\"\n                          >\n                            <span aria-hidden=\"true\">×</span>\n                          </Button>\n                        </Alert>\n                      </React.Fragment>\n                    ))}\n\n                  </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={open} className=\"\">\n                <pre>\n                  <code>\n                    {`\n\n    <React.Fragment>\n      {list.map((item, k) => (\n        <React.Fragment key={k}>\n          <Alert\n            className=\"alert alert-dismissible fade show \"\n            variant={item.variant}\n          >\n            {\" \"}\n            <strong>{item.show}</strong> {item.text}\n            <Button\n              variant=\"\"\n              type=\"button\"\n              onClick={() => handleRemove(item.id)}\n              className=\"btn-close btn\"\n            >\n              <span aria-hidden=\"true\">×</span>\n            </Button>\n          </Alert>\n        </React.Fragment>\n                `}\n                  </code>\n                </pre>\n              </Collapse>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col lg={6} md={12} sm={12}>\n          <Card id=\"outline-alert\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                  <h6 className=\"card-title mb-1\">Outline Alerts</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setOutline(!Outline)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Use one of the four required contextual classNamees.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <React.Fragment>\n                    {outline.map((item, k) => (\n                      <React.Fragment key={k}>\n                        <Alert\n                          variant=\"\"\n                          className={`alert fade show alert-dismissible alert-outline-${item.variant}`}\n                        >\n                          {\" \"}\n                          <strong>{item.show}</strong> {item.text}\n                          <Button\n                            variant=\"\"\n                            type=\"button\"\n                            onClick={() => handleRemoveoutline(item.id)}\n                            className=\"btn-close\"\n                          >\n                            <span aria-hidden=\"true\">×</span>\n                          </Button>\n                        </Alert>\n                      </React.Fragment>\n                    ))}\n\n                  </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Outline} className=\"\">\n<pre>\n<code>{`\n \n    <React.Fragment>\n      {list.map((item, k) => (\n        <React.Fragment key={k}>\n          <Alert\n            variant=\"\"\n            className={alert fade show alert-dismissible alert-outline-{item.variant}}\n          >\n            {\" \"}\n            <strong>{item.show}</strong> {item.text}\n            <Button\n              variant=\"\"\n              type=\"button\"\n              onClick={() => handleRemove(item.id)}\n              className=\"btn-close\"\n            >\n              <span aria-hidden=\"true\">×</span>\n            </Button>\n          </Alert>\n        </React.Fragment>\n  \n`}</code>\n                      </pre>\n              </Collapse>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col lg={6} md={12} sm={12}>\n          <Card id=\"solid-alert\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                  <h6 className=\"card-title mb-1\">Solid Colored Alerts</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setSolid(!Solid)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Use one of the four required contextual classNamees.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <React.Fragment>\n                    {solid.map((item, k) => (\n                      <React.Fragment key={k}>\n                        <Alert\n                          variant=\"\"\n                          className={`alert fade show alert-dismissible alert-solid-${item.variant}`}\n                        >\n                          {\" \"}\n                          <strong>{item.show}</strong> {item.text}\n                          <Button\n                            variant=\"\"\n                            type=\"button\"\n                            onClick={() => handleRemovesolid(item.id)}\n                            className=\"btn-close\"\n                          >\n                            <span aria-hidden=\"true\">×</span>\n                          </Button>\n                        </Alert>\n                      </React.Fragment>\n                    ))}\n\n                  </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Solid} className=\"\">\n<pre>\n     <code>{`\n export const SolidColored = () => {\n   const [list, setList] = React.useState(initialList);\n   function handleRemove(id:any) {\n     const newList = list.filter((list) => list.id !== id);\n     setList(newList);\n   }\n   return (\n     <React.Fragment>\n       {list.map((item, k) => (\n         <React.Fragment key={k}>\n           <Alert\n             variant=\"\"\n             className={alert fade show alert-dismissible alert-solid-{item.variant}}\n           >\n             {\" \"}\n             <strong>{item.show}</strong> {item.text}\n             <Button\n               variant=\"\"\n               type=\"button\"\n               onClick={() => handleRemove(item.id)}\n               className=\"btn-close\"\n             >\n               <span aria-hidden=\"true\">×</span>\n             </Button>\n           </Alert>\n         </React.Fragment>\n       ))}\n     </React.Fragment>\n   );\n };\n`}</code>\n    </pre>\n              </Collapse>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col lg={6} md={12} sm={12}>\n          <div className=\"card custom-card\" id=\"dismiss-alerts\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                  <h6 className=\"card-title mb-1\">Dismissing Alerts</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setDismissing(!Dismissing)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Using the alert JavaScript plugin, it’s possible to dismiss any\n                  alert inline.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                <React.Fragment>\n      {Alertdismissing.map((playerData) => (\n        <React.Fragment key={playerData.id}>\n          <Alert\n            variant=\"\"\n            className={`alert fade show alert-dismissible alert-${playerData.variant}`}\n          >\n            {\" \"}\n            <strong>{playerData.show}</strong> {playerData.text}\n            <Button\n              variant=\"\"\n              type=\"button\"\n              onClick={() => handleRemovedismissing(playerData.id)}\n              className=\"btn-close\"\n            >\n              <span aria-hidden=\"true\">×</span>\n            </Button>\n          </Alert>\n        </React.Fragment>\n      ))}\n\n    </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Dismissing} className=\"\">\n                 <pre>\n                        <code>{`\n\n    <React.Fragment>\n    \n      {Alertdismissing.map((playerData) => (\n        <React.Fragment key={playerData.id}>\n          <Alert\n            variant=\"\"\n            className={alert fade show alert-dismissible alert-{playerData.variant}}\n          >\n            {\" \"}\n            <strong>{playerData.show}</strong> {playerData.text}\n            <Button\n              variant=\"\"\n              type=\"button\"\n              onClick={() => handleRemove(playerData.id)}\n              className=\"btn-close\"\n            >\n              <span aria-hidden=\"true\">×</span>\n            </Button>\n          </Alert>\n        </React.Fragment>\n \n`}</code>\n                      </pre>\n                    \n              </Collapse>\n            </Card.Body>\n          </div>\n        </Col>\n        <Col lg={6} md={12} sm={12}>\n          <div className=\"card custom-card\" id=\"icon-alerts\">\n            <Card.Body>\n              <div>\n                <div className='d-flex'>\n                  <h6 className=\"card-title mb-1\">Alert With Icon</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setIcon(!Icon)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Alerts can also contain additional HTML elements like headings,\n                  paragraphs and dividers.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                <React.Fragment>\n      {initialListicons.map((playerData, k) => (\n        <React.Fragment key={k}>\n          <Alert\n            variant=\"\"\n            className={`alert fade show alert-dismissible alert-${playerData.variant}`}\n          >\n            {\" \"}\n            <span className=\"alert-inner--icon\">\n              <i className={`${playerData.icons} `}></i>\n            </span>{\" \"}\n            <span className=\"alert-inner--text\">\n              <strong>{playerData.show}</strong> {playerData.text}\n            </span>\n          </Alert>\n        </React.Fragment>\n      ))}\n      \n    </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Icon} className=\"\">\n                      <pre>\n                        <code>{`\n\n    <React.Fragment>\n      {initialListicons.map((playerData, k) => (\n        <React.Fragment key={k}>\n          <Alert\n            variant=\"\"\n            className={alert fade show alert-dismissible alert-{playerData.variant}}\n          >\n                  {\" \"}\n                  <span className=\"alert-inner--icon\">\n                    <i className={{playerData.icons}}></i>\n                  </span>{\" \"}\n                  <span className=\"alert-inner--text\">\n                    <strong>{playerData.show}</strong> {playerData.text}\n                  </span>\n                </Alert>\n              </React.Fragment>\n      ))}\n      </React.Fragment>\n`}</code>\n                      </pre>\n                    \n              </Collapse>\n            </Card.Body>\n          </div>\n        </Col>\n        <Col lg={6} md={12} sm={12}>\n          <div className=\"card custom-card\" id=\"icon-dismissalerts\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                  <h6 className=\"card-title mb-1\">Alert With Icon Dismissing</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setDismissingIcon(!DismissingIcon)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Alerts can also contain additional HTML elements like headings,\n                  paragraphs and dividers.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                <React.Fragment>\n\n{iconsdismissing.map((playerData) => (\n  <React.Fragment key={playerData.id}>\n    <Alert\n      variant=\"\"\n      className={`alert fade show alert-dismissible alert-${playerData.variant}`}\n    >\n      {\" \"}\n      <span className=\"alert-inner--icon\">\n        <i className={`${playerData.icons} `}></i>\n      </span>{\" \"}\n      <span className=\"alert-inner--text\">\n        <strong>{playerData.show}</strong> {playerData.text}\n      </span>\n      <Button\n        variant=\"\"\n        type=\"button\"\n        onClick={() => handleRemoveicons(playerData.id)}\n        className=\"btn-close\"\n      >\n        <span aria-hidden=\"true\">×</span>\n      </Button>\n    </Alert>\n  </React.Fragment>\n))}\n\n</React.Fragment>\n                </div>\n              </div>\n              <Collapse in={DismissingIcon} className=\"\">\n                  \n                      <pre>\n                        <code>{`\n export const Alertsicons = () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <React.Fragment>\n      {initialListicons.map((playerData, k) => (\n        <React.Fragment key={k}>\n          <Alert\n            variant=\"\"\n            className={alert fade show alert-dismissible alert-{playerData.variant}}\n          >\n                  {\" \"}\n                  <span className=\"alert-inner--icon\">\n                    <i className={{playerData.icons}}></i>\n                  </span>{\" \"}\n                  <span className=\"alert-inner--text\">\n                    <strong>{playerData.show}</strong> {playerData.text}\n                  </span>\n                </Alert>\n              </React.Fragment>\n      ))}\n      </React.Fragment>\n`}</code>\n                      </pre>\n                   \n              </Collapse>\n            </Card.Body>\n          </div>\n        </Col>\n        <Col lg={12} md={12} sm={12}>\n          <Card className=\" custom-card\" id=\"link-alerts\">\n            <Card.Body>\n              <div>\n                <div className='d-flex'>\n                  <h6 className=\"card-title mb-1\">Link color Alerts</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setLink(!Link)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Use the <code className=\"highlighter-rouge\">.alert-link</code>{\" \"}\n                  utility className to quickly provide matching colored links\n                  within any alert.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                <React.Fragment>\n\n{Alertdatalink.map((playerData, k) => (\n  <Alert key={k} variant=\"\" className={`alert alert-${playerData.color}`}>\n    This is a {playerData.color} alert with{\" \"}\n    <Alert.Link className=\"alert-link\" href=\"#\">\n      an example link\n    </Alert.Link>\n    . Give it a click if you like.\n  </Alert>\n))}\n\n</React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Link} className=\"\">\n            <pre>\n                        <code>{`\n \n    <React.Fragment>\n      {Alertdatalink.map((playerData, k) => (\n        <Alert key={k} variant=\"\" className={alert alert-{playerData.color}}>\n          This is a {playerData.color} alert with{\" \"}\n          <Alert.Link className=\"alert-link\" href=\"#\">\n            an example link\n          </Alert.Link>\n          . Give it a click if you like.\n        </Alert>\n      ))}\n      <React.Fragment>\n`}</code>\n                      </pre>\n                   \n              </Collapse>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col lg={12} md={12} sm={12}>\n          <div className=\"card custom-card\" id=\"additional-alerts\">\n            <Card.Body>\n              <div>\n                <div className='d-flex'>\n                  <h6 className=\"card-title mb-1\">Additional Content Alert</h6>\n                  <Form.Check\n                    label=\"Show Code\"\n                    type=\"switch\"\n                    onClick={() => setAdditional(!Additional)}\n                    className=\"showcode d-flex ms-auto \"\n                  />\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Alerts can also contain additional HTML elements like headings,\n                  paragraphs and dividers.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                <React.Fragment>\n      {Alertdatacontent.map((playerData, k) => (\n        <Alert\n          key={k}\n          className={`alert mb-2 alert-${playerData.bg}`}\n          variant=\"\"\n        >\n          <Alert.Heading>\n            <h4 className=\"alert-heading\">\n              <i className={`${playerData.fe} me-2 tx-20`}></i>\n              {playerData.text}\n            </h4>\n          </Alert.Heading>\n          <p>\n            Aww yeah, you successfully read this important alert message. This\n            example text is going to run a bit longer so that you can see how\n            spacing within an alert works with this kind of content.\n          </p>\n          <hr />\n          <p className=\"mb-0\">\n            Whenever you need to, be sure to use margin utilities to keep things\n            nice and tidy.\n          </p>\n        </Alert>\n      ))}\n     \n    </React.Fragment>\n                </div>\n              </div>\n              <Collapse in={Additional} className=\"\">\n                      <pre>\n                        <code>{`\n\n    <React.Fragment>\n      {Alertdatacontent.map((playerData, k) => (\n        <Alert\n          key={k}\n          className={alert mb-2 alert-{playerData.bg}}\n                  variant=\"\"\n        >\n                  <Alert.Heading>\n                    <h4 className=\"alert-heading\">\n                      <i className={{playerData.fe} me-2 tx-20}></i>\n                      {playerData.text}\n                    </h4>\n                  </Alert.Heading>\n                  <p>\n                    Aww yeah, you successfully read this important alert message. This\n                    example text is going to run a bit longer so that you can see how\n                    spacing within an alert works with this kind of content.\n                  </p>\n                  <hr />\n                  <p className=\"mb-0\">\n                    Whenever you need to, be sure to use margin utilities to keep things\n                    nice and tidy.\n                  </p>\n                </Alert>\n      ))}\n      </React.Fragment>\n`}</code>\n                      </pre>\n                   \n              </Collapse>\n            </Card.Body>\n          </div>\n        </Col>\n      </Row>\n      {/* <!-- /row --> */}\n    </div>\n  );\n}\nAlerts.propTypes = {};\n\nAlerts.defaultProps = {};\n\nexport default Alerts;\n"],"names":["initialList","id","show","variant","text","initialListdismissing","initialListicons","icons","Alertdatalink","color","Alertdatacontent","bg","fe","Alerts","useState","open","setOpen","alertData","setalertData","Outline","setOutline","outline","setoutline","Solid","setSolid","solid","setsolid","Dismissing","setDismissing","Icon","setIcon","Link","setLink","DismissingIcon","setDismissingIcon","Additional","setAdditional","Alertdismissing","setAlertdismissing","iconsdismissing","seticonsdismissing","className","Breadcrumb","href","active","Row","Col","lg","md","sm","Card","Form","label","type","onClick","map","item","k","Alert","Button","newList","filter","list","handleRemove","Collapse","in","handleRemoveoutline","handleRemovesolid","playerData","handleRemovedismissing","handleRemoveicons","defaultProps"],"sourceRoot":""}